package arbolesBinarios;

import java.util.Scanner;

public class Nodo {
	Persona p;
	Nodo izq;
	Nodo der;

	public Nodo(Persona p) {
		this.p = p;
		this.izq = null;
		this.der = null;
	}

	public Nodo() {
		this.p = null;
		this.izq = null;
		this.der = null;
	}

	public Nodo crearNodo() {
		Scanner key = new Scanner(System.in);
		System.out.print("Nombre: ");
		String nombre = key.next();
		System.out.print("Cedula: ");
		long cedula = key.nextLong();
		Nodo n = new Nodo(new Persona(cedula, nombre));
		return n;
	}

	public String toString() {
		return p + "{" + izq + ", " + der + "}";
	}

}
package arbolesBinarios;

public class ArbolBinario {
	static Nodo raiz;

	public ArbolBinario() {
		this.raiz = null;
	}

	public void imprimirInOrden(Nodo raiz) {
		if (raiz != null) {
			imprimirInOrden(raiz.izq);
			System.out.println("[" + raiz.p.nombre + "] \t[" + raiz.p.cedula + "]");
			imprimirInOrden(raiz.der);
		}
	}

	public void imprimirPreOrden(Nodo raiz) {
		if (raiz != null) {
			System.out.println("[" + raiz.p.nombre + "] \t[" + raiz.p.cedula + "]");
			imprimirPreOrden(raiz.izq);
			imprimirPreOrden(raiz.der);
		}
	}

	public void imprimirPostOrden(Nodo raiz) {
		if (raiz != null) {
			imprimirPreOrden(raiz.izq);
			imprimirPreOrden(raiz.der);
			System.out.println("[" + raiz.p.nombre + "] \t[" + raiz.p.cedula + "]");
		}
	}

	public void insertarNodo(Nodo n) {
		if (raiz == null) {
			raiz = n;
		} else {
			Nodo aux = raiz;
			Nodo padre;
			while (true) {
				padre = aux;
				if (n.p.cedula < padre.p.cedula) {
					aux = aux.izq;
					if (aux == null) {
						padre.izq = n;
						return;
					}
				} else {
					aux = aux.der;
					if (aux == null) {
						padre.der = n;
						return;
					}
				}
			}
		}
	}

	public static Nodo buscarNodo(long ced) {
		if (raiz == null) {
			System.out.println("Arbol vacío");
			return null;
		}
		Nodo aux = raiz;
		while (aux.p.cedula != ced) {
			if (ced < aux.p.cedula) {
				aux = aux.izq;
			} else {
				aux = aux.der;
			}
			if (aux == null) {
				return null;
			}
		}
		return aux;
	}

	public String toString() {
		return raiz + "";
	}
}
package arbolesBinarios;
public class Persona {
	long cedula;
	String nombre;

	public Persona(long ced, String name) {
		this.cedula = ced;
		this.nombre = name;
	}

	public Persona() {
		this.cedula = 0;
		this.nombre = "NuevoNombre";
	}

	public String toString(){
		return "["+this.cedula+", "+this.nombre+"]";
	}
}
package arbolesBinarios;

import java.io.*;

class File {
	public static ArbolBinario leerArchivo() {
		try {
			// Abre archivo
			FileInputStream fstream = new FileInputStream(
					"C:/Users/David/Dropbox/1. Administracion de sistemas/WorkSpace/Estructuras/Corte2/arbolesBinarios/Entrada.csv");
			// Objeto para entrada
			DataInputStream entrada = new DataInputStream(fstream);
			// Creamos el Buffer de Lectura
			BufferedReader buffer = new BufferedReader(new InputStreamReader(entrada));
			String strLinea;
			ArbolBinario arbol = new ArbolBinario();
			/* convierte cada linea en un String[] separado por el token ";" 
			   se crea nodo con los datos y se inserta al arbol creado*/
			while ((strLinea = buffer.readLine()) != null) {
				String[] datos = strLinea.split(";");
				String nombre = datos[0];
				long cedula = (long) Integer.parseInt(datos[1]);
				Nodo n = new Nodo(new Persona(cedula, nombre));
				arbol.insertarNodo(n);
			}
			// Se cierra archivo
			entrada.close();
			return arbol;
		} catch (Exception e) { // Catch de excepciones
			System.err.println("Ocurrio un error: " + e.getMessage());
			return null;
		}
	}
}
package arbolesBinarios;

import java.util.Scanner;

public class Principal {
	public static void main(String[] args) {
		ArbolBinario arbol = new ArbolBinario();
		Scanner key = new Scanner(System.in);
		while (true) {
			char option = menuPrincipal();
			switch (option) {
			case '1':
				arbol = File.leerArchivo();
				System.out.println("Arbol cargado....");
				break;
			case '2':
				arbol.raiz = null;
				System.out.print("Ingrese cantidad de nodos: ");
				int x = key.nextInt();
				for (int i = 0; i < x; i++) {
					Nodo n = new Nodo();
					n = n.crearNodo();
					arbol.insertarNodo(n);
				}
				System.out.println("Arbol creado....");
				break;
			case '3':
				if (arbol.raiz == null) {
					System.out.println("Arbol vacío...");
				} else {
					System.out.println(arbol);
				}
				break;
			case '4':
				if (arbol.raiz == null) {
					System.out.println("Arbol vacío...");
				} else {
					arbol.imprimirPreOrden(arbol.raiz);
				}
				break;
			case '5':
				if (arbol.raiz == null) {
					System.out.println("Arbol vacío...");
				} else {
					arbol.imprimirInOrden(arbol.raiz);
				}
				break;
			case '6':
				if (arbol.raiz == null) {
					System.out.println("Arbol vacío...");
				} else {
					arbol.imprimirPostOrden(arbol.raiz);
				}
				break;
			case '7':
				if (arbol.raiz == null) {
					System.out.println("Arbol vacío...");
				} else {
					System.out.print("Ingrese cedula: ");
					long num = key.nextLong();
					Nodo r = new Nodo();
					r = ArbolBinario.buscarNodo(num);
					if (r != null) {
						System.out.println("Resultado para '" + num + "': " + r.p.nombre);
					} else {
						System.out.println("No existe en arbol");
					}
				}
				break;
			default:
				key.close();
				System.out.println("\t\t\t***FIN PROGRAMA***");
				return;
			}
		}
	}

	public static char menuPrincipal() {
		System.out.println("\n\t\t\t****MENU PRINCIPAL****");
		System.out.print("" + "1. Crear arbol a partir de archivo\n" 
				+ "2. Crear arbol de forma manual\n"
				+ "3. Imprimir desde raiz (usa toString)\n" 
				+ "4. Imprimir de forma PreOrden\n"
				+ "5. Imprimir de forma InOrden\n"
				+ "6. Imprimir de forma PostOrden\n"
				+ "7. Buscar por cedula\n"
				+ "8. o cualquier otra tecla para salir\n" 
				+ "OPCION: ");
		Scanner key = new Scanner(System.in);
		char option = key.nextLine().charAt(0);
		System.out.println();
		
		return option;
	}
}